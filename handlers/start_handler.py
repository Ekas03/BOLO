import re
from aiogram import types
import uuid
from uuid import uuid4
from sqlalchemy.orm import Session
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message,InlineKeyboardMarkup, InlineKeyboardButton
from main import router
from database.database import SessionLocal
from database.crud import (get_user_by_telegram_id, check_invitation_exists_by_uuid, handle_invitation_code,
                           check_user_has_couple, check_invitation_exists, get_invitation_uuid, get_couple_days,
                           create_user, delete_invitation, create_invitation)

# –ö–ª–∞—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class Registration(StatesGroup):
    waiting_for_name = State()
    waiting_for_gender = State()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def start(message: Message, state: FSMContext = None):
    with SessionLocal() as db:
        if state != None:
            if get_user_by_telegram_id(db, message.from_user.id) is None:
                await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
                await state.set_state(Registration.waiting_for_name)
            else:
                await process_user_status(db, message)
        else:
            await process_user_status(db, message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def process_user_status(db: Session, message: Message):
    if check_user_has_couple(db, message.from_user.id):
        await couple_menu(db, message)
    else:
        if check_invitation_exists(db, message.from_user.id):
            uuid = get_invitation_uuid(db, message.from_user.id)
            revoke_button = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå–û—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", callback_data=f"revoke_{uuid}")]
            ])
            await message.answer("–ü—Ä–∏–≤–µ—Ç! –£ –í–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –µ–≥–æ.", reply_markup=revoke_button)
        else:
            invitation_button = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_inv")]
            ])
            await message.answer("–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞",
                                 reply_markup=invitation_button)


# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
async def couple_menu(db: Session, message: Message = None, userId = None):
    if userId != None:
        user = get_user_by_telegram_id(db, userId)
    else:
        user = get_user_by_telegram_id(db, message.from_user.id)
    if user and user.CoupleId:
        couple_days = get_couple_days(db, user.CoupleId)
    else:
        couple_days = "unknown"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data='calendar')],
        [InlineKeyboardButton(text='‚úÖ –ß–µ–ª–ª–µ–Ω–¥–∂–∏', callback_data='challenges')],
        [InlineKeyboardButton(text='üíû –ó–∞–¥–∞–Ω–∏—è', callback_data='tasks')],
        [InlineKeyboardButton(text='–ö–Ω–∏–≥–∞ –ª—é–±–≤–∏')],
        [InlineKeyboardButton(text='üó∫ –ö–∞—Ä—Ç–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π')]
    ])

    await message.answer(f"üíï –ú–´ –í–ú–ï–°–¢–ï –£–ñ–ï {couple_days} {plural_days(couple_days)}!!! üíï", reply_markup=keyboard)


# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞
def plural_days(value: int):
    days = ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']

    if value % 10 == 1 and value % 100 != 11:
        return days[0]
    elif 2 <= value % 10 <= 4 and (value % 100 < 10 or value % 100 >= 20):
        return days[1]
    return days[2]


# –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
@router.callback_query(lambda c: c.data == "create_inv")
async def callback_create_invitation(callback_query: types.CallbackQuery):
    uuid = str(uuid4())
    with SessionLocal() as db:
        create_invitation(db, uuid, callback_query.from_user.id)
    revoke_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–æ–∑–≤–∞—Ç—å", callback_data=f"revoke_{uuid}")]
    ])
    await callback_query.message.edit_text("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –¢—ã –º–æ–∂–µ—à—å –æ—Ç–æ–∑–≤–∞—Ç—å –µ–≥–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç. –û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ —Å–≤–æ–µ–º—É –ø–∞—Ä—Ç–Ω—ë—Ä—É:",
                                           reply_markup=revoke_button)
    await callback_query.message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ BOLO –ø–æ –∫–æ–¥—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:")
    await callback_query.message.answer(f"/add {uuid}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
@router.message(Command("add"))
async def process_invitation_code(message: Message):
    _, invitation_code = message.text.split(maxsplit=1)
    try:
        uuid.UUID(invitation_code)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ü—Ä–∏–º–µ—Ä: /add 12345678")
        return
    with SessionLocal() as db:
        if check_invitation_exists_by_uuid(db, invitation_code):
            new_couple = handle_invitation_code(db, invitation_code, message.from_user.id)
            if new_couple:
                await message.answer("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä BOLO!")
                await start(message=message)
            else:
                await message.answer("‚õî–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            await message.answer("‚õî–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
@router.callback_query(lambda callback_query: callback_query.data.startswith("revoke_"))
async def revoke_invitation(callback_query: types.CallbackQuery):
    uuid = callback_query.data.split("_")[1]
    with SessionLocal() as db:
        delete_invitation(db, callback_query.from_user.id)
    await callback_query.answer()
    await callback_query.message.chat.delete_message(message_id=callback_query.message.message_id)
    await start(message=callback_query.message)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏, —É–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª–∞
@router.message(Registration.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    name = message.text
    if not re.match("^[a-zA-Z–∞-—è–ê-–Ø]+$", name):
        await message.answer("–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â–µ —Ä–∞–∑.")
        return
    await state.update_data(name=name)
    gender_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞ üë∏", callback_data="0"),
            InlineKeyboardButton(text="–ú—É–∂—á–∏–Ω–∞ ü§¥", callback_data="1")
        ]
    ])
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_keyboard)
    await state.set_state(Registration.waiting_for_gender)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–∞
@router.callback_query(Registration.waiting_for_gender)
async def process_gender_callback(callback_query: types.CallbackQuery, state: FSMContext):
    gender = callback_query.data
    user_data = await state.get_data()
    name = user_data['name']
    if gender == "1" or gender == "0":
        await state.update_data(gender=gender)
        await callback_query.answer()
        await callback_query.message.chat.delete_message(message_id=callback_query.message.message_id)
        with SessionLocal() as db:
            create_user(db, callback_query.from_user.id, name, int(callback_query.data), None)
        await start(message=callback_query.message)


# –í–æ–∑–≤—Ä–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é
@router.callback_query(lambda c: c.data == "back_start")
async def callback_back_start(callback_query: types.CallbackQuery):
    await callback_query.message.chat.delete_message(message_id=callback_query.message.message_id)
    with SessionLocal() as db:
        await couple_menu(db, message=callback_query.message, userId=callback_query.from_user.id)
